# Dockerfile для продакшена Nuxt.js приложения (оптимизированная версия)
# Использует pnpm store для кэширования

# Этап 1: Базовый образ с pnpm
FROM node:20-alpine AS base

# Установка необходимых инструментов для сборки
RUN apk add --no-cache libc6-compat python3 make g++

# Настройка pnpm
RUN corepack enable && corepack prepare pnpm@10.18.0 --activate
ENV PNPM_HOME=/pnpm
ENV PATH="$PNPM_HOME:$PATH"

# Этап 2: Fetch зависимостей (использует pnpm fetch для кэширования)
FROM base AS fetch
WORKDIR /app
COPY Frontend/package.json Frontend/pnpm-lock.yaml ./
COPY Frontend/pnpm-workspace.yaml ./
RUN pnpm fetch

# Этап 3: Установка зависимостей из кэша
FROM base AS deps
WORKDIR /app
COPY Frontend/package.json Frontend/pnpm-lock.yaml ./
COPY Frontend/pnpm-workspace.yaml ./
COPY --from=fetch /root/.local/share/pnpm/store /root/.local/share/pnpm/store
RUN pnpm install --frozen-lockfile --offline

# Этап 4: Сборка приложения
FROM base AS builder
WORKDIR /app
COPY Frontend/ ./
COPY --from=deps /app/node_modules ./node_modules
RUN pnpm run build

# Этап 5: Production образ (минимальный)
FROM node:20-alpine AS runner
WORKDIR /app

# Устанавливаем только runtime зависимости
RUN apk add --no-cache libc6-compat

# Создаем пользователя без прав root для безопасности
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nuxtjs

# Копируем собранное приложение
COPY --from=builder --chown=nuxtjs:nodejs /app/.output /app/.output

# Переключаемся на непривилегированного пользователя
USER nuxtjs

# Открываем порт
EXPOSE 3000

# Переменные окружения
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=3000
ENV NITRO_HOST=0.0.0.0
ENV NITRO_PORT=3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Запускаем приложение
CMD ["node", ".output/server/index.mjs"]

